# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type GenderModel {
  uuid: String!
  name: String!
}

type AuthenticationModel {
  accessToken: String!
  refreshToken: String!
}

type LogoutModel {
  success: Boolean!
}

type UserModel {
  uuid: ID!
  firstName: String!
  lastName: String!
  birthDate: DateTime!
  email: String!
  gender: GenderModel!
  status: UserStatus!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum UserStatus {
  Active
  Blocked
}

"""Genre"""
type MovieGenreModel {
  id: ID!
  name: String!
}

"""Movie production company"""
type MovieProductionCompanyModel {
  id: Float!
  name: String!
  logoPath: String
  originCountry: String
}

"""Movie production country"""
type MovieProductionCountryModel {
  name: String!
  iso31661: String!
}

"""Movie spoken language"""
type MovieSpokenLanguageModel {
  name: String!
  iso6391: String!
}

"""Movie details"""
type MovieDetailsModel {
  posterPath: String
  adult: Boolean!
  overview: String
  releaseDate: String!
  id: ID!
  originalTitle: String!
  originalLanguage: String!
  title: String!
  backdropPath: String
  popularity: Float!
  video: Boolean!
  voteAverage: Float!
  voteCount: Float!
  belongsToCollection: String
  budget: Float!
  genres: [MovieGenreModel!]!
  homepage: String
  imdbId: String
  productionCompanies: [MovieProductionCompanyModel!]!
  productionCountries: [MovieProductionCountryModel!]!
  revenue: Float!
  runtime: Float
  spokenLanguages: [MovieSpokenLanguageModel!]!
  status: String!
  tagline: String
}

"""Movie list"""
type MovieModel {
  posterPath: String
  adult: Boolean!
  overview: String
  releaseDate: String!
  id: ID!
  originalTitle: String!
  originalLanguage: String!
  title: String!
  backdropPath: String
  popularity: Float!
  video: Boolean!
  voteAverage: Float!
  voteCount: Float!
  genresId: [Float!]
}

"""Movies with pagination info"""
type MoviesResultsModelWithPagination {
  page: Int!
  totalPages: Int!
  totalResults: Int!
  results: [MovieModel!]!
}

type Query {
  user: UserModel!
  gender(uuid: String!): GenderModel!
  genders: [GenderModel!]!
  movieGenre(id: Int!): MovieGenreModel!
  movieGenres: [MovieGenreModel!]!
  movieDetails(id: Int!): MovieDetailsModel!
  latestMovie: MovieDetailsModel!
  popularMovies(page: Int!): MoviesResultsModelWithPagination!
  upcomingMovies(page: Int!): MoviesResultsModelWithPagination!
  topRatedMovies(page: Int!): MoviesResultsModelWithPagination!
}

type Mutation {
  createUser(crateUserData: CreateUserDto!): Boolean!
  updateUser(updateUserData: UpdateUserDto!): UserModel!
  authenticate(authentication: AuthenticationDto!): AuthenticationModel!
  refreshAuthentication(refreshToken: RefreshAuthenticationDto!): AuthenticationModel!
  logout: LogoutModel!
}

input CreateUserDto {
  firstName: String!
  lastName: String!
  birthDate: DateTime!
  email: String!
  genderUuid: String!
  password: String!
}

input UpdateUserDto {
  firstName: String
  lastName: String
  birthDate: DateTime
  genderUuid: String
}

input AuthenticationDto {
  email: String!
  password: String!
}

input RefreshAuthenticationDto {
  refreshToken: String!
}